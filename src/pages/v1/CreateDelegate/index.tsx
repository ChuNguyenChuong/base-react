import { CheckOutlined, UploadOutlined } from '@ant-design/icons';
import { getCountries } from '@app/api/v1/delegate';
import { BaseButton } from '@app/components/common/BaseButton/BaseButton';
import { BaseUpload } from '@app/components/common/BaseUpload/BaseUpload';
import { BaseInput } from '@app/components/common/inputs/BaseInput/BaseInput';
import { notificationController } from '@app/controllers/notificationController';
import { useAppSelector } from '@app/hooks/reduxHooks';
import { AnyElement } from '@app/types/generalTypes';
import { getBase64 } from '@app/utils/utils';
import { useQuery } from '@tanstack/react-query';
import { Checkbox, Col, DatePicker, Divider, Form, Input, Radio, Row, Select, UploadProps } from 'antd';
import React, { memo, useState } from 'react';
import {
  FlexCol,
  ImageAvatar,
  ImagePreview,
  ListAdv,
  PriceItem,
  SubmitAction,
  TypeRegister,
  TypeRegisterItem,
  UploadReport,
  WrapperBox,
  WrapperImageAvatar,
} from './styles';
const { Option } = Select;

type ITypeRegister = 1 | 2 | 3 | null;

const CreateDelegate: React.FC = () => {
  const [isShowHelpCare, setIsShowHelpCare] = useState('');
  const [isSupportEating, setIsSupportEating] = useState('');
  const [typeRegister, setTypeRegister] = useState<ITypeRegister>(1);
  const [form] = Form.useForm();

  const { focusData } = useAppSelector((state) => state.delegate);
  console.log('üöÄ ~ file: index.tsx:36 ~ focusData:', focusData);
  const [previewImage, setPreviewImage] = useState(focusData.avatar_path ?? '');
  const { data: countries } = useQuery({
    queryKey: ['country'],
    queryFn: () => {
      return getCountries();
    },
  });

  const props: UploadProps = {
    name: 'file',
    showUploadList: false,
    beforeUpload: async (file) => {
      console.log('file.type', file.type);

      const isPNG = file.type === 'image/png' || file.type === 'image/jpeg';
      if (!isPNG) {
        notificationController.error({
          message: 'B·∫°n ch·ªâ c√≥ th·ªÉ upload file ·∫£nh!',
        });
        return false;
      }
      const isLt2M = file.size / 1024 / 1024 < 10;
      if (!isLt2M) {
        notificationController.error({ message: '·∫¢nh upload c√≥ dung l∆∞·ª£ng t·ªëi ƒëa 2M' });
        return false;
      }
      const preview = await getBase64(file);
      setPreviewImage(preview);
      return false;
    },
  };

  const onFinish = (values: AnyElement) => {
    console.log('Received values of form: ', values);
  };

  const changeTypeRegister = (value: ITypeRegister) => {
    setTypeRegister(value);
  };

  const submitCreated = (e: any, form: any) => {
    console.log(form);

    e.preventDefault();
  };

  return (
    <Form form={form} name="validate_other" layout="vertical" onFinish={onFinish} initialValues={focusData}>
      <Row gutter={30}>
        <Col span={16}>
          <FlexCol>
            <WrapperBox>
              <Row gutter={16}>
                <Col span={8}>
                  <Form.Item
                    name="avatar"
                    hasFeedback
                    rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ·∫£nh ƒë·∫°i di·ªán!' }]}
                  >
                    <WrapperImageAvatar>
                      <h4>·∫¢nh c√° nh√¢n</h4>
                      <ImageAvatar>
                        <ImagePreview src={previewImage ? previewImage : '/assets/user.png'} />
                      </ImageAvatar>
                      <p
                        style={{
                          fontSize: '10px',
                        }}
                      >
                        ·∫¢nh n√†y s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng l√†m ·∫£nh th·∫ª c·ªßa b·∫°n.
                      </p>

                      <BaseUpload {...props}>
                        <BaseButton icon={<UploadOutlined />}>T·∫£i ·∫£nh l√™n</BaseButton>
                      </BaseUpload>
                    </WrapperImageAvatar>
                  </Form.Item>
                </Col>
                <Col span={16}>
                  <Row gutter={16}>
                    <Col span={24}>
                      <Form.Item
                        name="danhXung"
                        label="Danh x∆∞ng"
                        hasFeedback
                        rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn danh x∆∞ng!' }]}
                      >
                        <Select placeholder="Ch·ªçn" size="small">
                          {/* TODO: update option */}
                          <Option value="china">China</Option>
                          <Option value="usa">U.S.A</Option>
                        </Select>
                      </Form.Item>
                    </Col>
                    <Col span={12}>
                      <Form.Item name="firstName" label="H·ªç" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p h·ªç!' }]}>
                        <BaseInput size="small" />
                      </Form.Item>
                    </Col>
                    <Col span={12}>
                      <Form.Item name="name" label="T√™n" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p t√™n!' }]}>
                        <BaseInput size="small" />
                      </Form.Item>
                    </Col>
                    <Col span={12}>
                      <Form.Item
                        initialValue={focusData.phone}
                        name="phoneNumber"
                        label="S·ªë ƒëi·ªán tho·∫°i"
                        rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!' }]}
                      >
                        <BaseInput size="small" />
                      </Form.Item>
                    </Col>
                    <Col span={12}>
                      <Form.Item
                        name="email"
                        label="Email"
                        rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p email!' }]}
                      >
                        <BaseInput size="small" />
                      </Form.Item>
                    </Col>
                    <Col span={12}>
                      <Form.Item
                        name="country"
                        label="Qu·ªëc gia"
                        rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn qu·ªëc gia!' }]}
                      >
                        <Select
                          placeholder="Ch·ªçn"
                          size="small"
                          showSearch
                          filterOption={(input, option: AnyElement) => {
                            const { key } = option || {};
                            return ((key || '') as string).toLowerCase().includes(input.toLowerCase());
                          }}
                        >
                          {countries?.map((item) => {
                            return (
                              <Option key={item.label} value={item.value}>
                                {item.label}
                              </Option>
                            );
                          })}
                        </Select>
                      </Form.Item>
                    </Col>
                    <Col span={12}>
                      <Form.Item
                        name="passport"
                        label="S·ªë h·ªô chi·∫øu/ CƒÉn c∆∞·ªõc c√¥ng d√¢n"
                        rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë h·ªô chi·∫øu ho·∫∑c CCCD!' }]}
                      >
                        <BaseInput size="small" />
                      </Form.Item>
                    </Col>
                    <Col span={12}>
                      <Form.Item
                        name="chucDanh"
                        label="Ch·ª©c danh"
                        rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ch·ª©c danh!' }]}
                      >
                        <Select placeholder="Ch·ªçn" size="small">
                          <Option value="china">China</Option>
                          <Option value="usa">U.S.A</Option>
                        </Select>
                      </Form.Item>
                    </Col>
                    <Col span={12}>
                      <Form.Item
                        name="dvToChuc"
                        label="ƒê∆°n v·ªã/ T·ªï ch·ª©c"
                        rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p ƒë∆°n v·ªã ho·∫∑c t·ªï ch·ª©c!' }]}
                      >
                        <BaseInput size="small" />
                      </Form.Item>
                    </Col>
                    <Col span={12}>
                      <Form.Item
                        name="timeCome"
                        label="Th√¥ng tin ƒë·∫øn"
                        rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn th√¥ng tin ƒë·∫øn!' }]}
                      >
                        <DatePicker style={{ width: '100%' }} size="small" />
                      </Form.Item>
                    </Col>
                    <Col span={12}>
                      <Form.Item
                        name="timeLeave"
                        label="Th√¥ng tin ƒëi"
                        rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn th√¥ng tin ƒëi!' }]}
                      >
                        <DatePicker style={{ width: '100%' }} size="small" />
                      </Form.Item>
                    </Col>

                    <Col span={12}>
                      <Form.Item
                        name="howToLeave"
                        label="Ph∆∞∆°ng th·ª©c di chuy·ªÉn"
                        rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c di chuy·ªÉn!' }]}
                      >
                        <Select placeholder="Ch·ªçn" size="small">
                          <Option value="china">China</Option>
                          <Option value="usa">U.S.A</Option>
                        </Select>
                      </Form.Item>
                    </Col>

                    <Col span={12}>
                      <Form.Item
                        name="registerHowToLeave"
                        label="ƒêƒÉng k√Ω ph∆∞∆°ng ti·ªán di chuy·ªÉn"
                        rules={[{ required: true, message: 'Vui l√≤ng ƒëƒÉng k√Ω ph∆∞∆°ng ti·ªán di chuy·ªÉn!' }]}
                      >
                        <Radio.Group>
                          <Radio value="a">C√≥</Radio>
                          <Radio value="b">Kh√¥ng</Radio>
                        </Radio.Group>
                      </Form.Item>
                    </Col>

                    <Col span={24}>
                      <Form.Item
                        name="isMainCustomer"
                        rules={[{ required: true, message: 'Vui l√≤ng x√°c nh·∫≠n tr∆∞·ªùng n√†y!' }]}
                        label={
                          <p style={{ marginBottom: 0 }}>
                            Qu√Ω v·ªã c√≥ ph·∫£i l√† <strong>Ch√≠nh kh√°ch/ ƒê·∫°i di·ªán ch√≠nh quy·ªÅn </strong> (Th·ªã tr∆∞·ªüng/ T·ªânh
                            tr∆∞·ªüng/ Ch·ªß t·ªãch t·ªânh) kh√¥ng ?
                          </p>
                        }
                      >
                        <Radio.Group>
                          <Radio value="a">C√≥</Radio>
                          <Radio value="b">Kh√¥ng</Radio>
                        </Radio.Group>
                      </Form.Item>
                      <Form.Item name="isMainCustomerDetail">
                        <Select placeholder="Ch·ªçn" size="small">
                          <Option value="china">China</Option>
                          <Option value="usa">U.S.A</Option>
                        </Select>
                      </Form.Item>
                    </Col>
                  </Row>
                </Col>
              </Row>
            </WrapperBox>
            {/* Ng∆∞·ªùi li√™n l·∫°c kh·∫©n c·∫•p */}
            <WrapperBox>
              <h1>Ng∆∞·ªùi li√™n l·∫°c kh·∫©n c·∫•p</h1>
              <Row gutter={16}>
                <Col span={12}>
                  <Form.Item
                    name="roleContactSupport"
                    label="Danh x∆∞ng"
                    hasFeedback
                    rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn danh x∆∞ng!' }]}
                  >
                    <Select placeholder="Ch·ªçn" size="small">
                      {/* TODO: update option */}
                      <Option value="china">China</Option>
                      <Option value="usa">U.S.A</Option>
                    </Select>
                  </Form.Item>
                </Col>
                <Col span={12}>
                  <Form.Item
                    name="nameContactSupport"
                    label="H·ªç v√† t√™n"
                    hasFeedback
                    rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn h·ªç v√† t√™n!' }]}
                  >
                    <BaseInput size="small" />
                  </Form.Item>
                </Col>
                <Col span={12}>
                  <Form.Item
                    name="phoneNumberContactSupport"
                    label="S·ªë ƒëi·ªán tho·∫°i"
                    rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p h·ªç!' }]}
                  >
                    <BaseInput size="small" />
                  </Form.Item>
                </Col>
                <Col span={12}>
                  <Form.Item
                    name="mailContactSupport"
                    label="Email"
                    rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p h·ªç!' }]}
                  >
                    <BaseInput size="small" />
                  </Form.Item>
                </Col>
              </Row>
            </WrapperBox>
          </FlexCol>
        </Col>
        <Col span={8}>
          <FlexCol>
            {/* Th√¥ng tin ri√™ng t∆∞ */}
            <WrapperBox>
              <h1>Th√¥ng tin ri√™ng t∆∞</h1>
              <Divider></Divider>
              <Form.Item
                name="sizeOutfit"
                label="C·ª° √°o"
                hasFeedback
                rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn c·ª° √°o!' }]}
              >
                <Checkbox.Group>
                  <Checkbox value="S" style={{ lineHeight: '32px' }}>
                    S
                  </Checkbox>
                  <Checkbox value="M" style={{ lineHeight: '32px' }}>
                    M
                  </Checkbox>
                  <Checkbox value="L" style={{ lineHeight: '32px' }}>
                    L
                  </Checkbox>
                  <Checkbox value="XL" style={{ lineHeight: '32px' }}>
                    XL
                  </Checkbox>
                  <Checkbox value="XXL" style={{ lineHeight: '32px' }}>
                    XXL
                  </Checkbox>
                </Checkbox.Group>
              </Form.Item>
              <Form.Item
                name="isSupportMedical"
                label="H·ªó tr·ª£ y t·∫ø"
                rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn h·ªó tr·ª£ y t·∫ø!' }]}
              >
                <Radio.Group onChange={(e) => setIsShowHelpCare(e.target.value)}>
                  <Radio value="yes">C√≥</Radio>
                  <Radio value="no">Kh√¥ng</Radio>
                </Radio.Group>
              </Form.Item>
              {isShowHelpCare === 'yes' && (
                <Form.Item
                  name="supportMedicalDetail"
                  rules={[{ required: true, message: 'Vui l√≤ng ghi ch√∫ ƒë·ªÉ ch√∫ng t√¥i chu·∫©n b·ªã y t·∫ø c·∫ßn thi·∫øt!' }]}
                >
                  <Input.TextArea showCount maxLength={100} placeholder="Cung c·∫•p th√¥ng tin ƒë·∫∑c bi·ªát" />
                </Form.Item>
              )}
              <Form.Item
                name="isSupportEating"
                label="Y√™u c·∫ßu ƒë·∫∑c bi·ªát v·ªÅ ƒÉn u·ªëng"
                rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn y√™u c·∫ßu ƒë·∫∑c bi·ªát!' }]}
              >
                <Radio.Group onChange={(e) => setIsSupportEating(e.target.value)}>
                  <Radio value="yes">C√≥</Radio>
                  <Radio value="no">Kh√¥ng</Radio>
                </Radio.Group>
              </Form.Item>
              {isSupportEating === 'yes' && (
                <>
                  <Form.Item
                    name="supportEatingDetail.eatingType"
                    label="√îng/ B√† c√≥ thu·ªôc m·ªôt trong c√°c ƒë·ªëi t∆∞·ª£ng sau ?"
                    hasFeedback
                    rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn lo·∫°i th·ª©c ƒÉn!' }]}
                  >
                    <Checkbox.Group>
                      <Col>
                        <Checkbox value="1" style={{ lineHeight: '32px' }}>
                          Thu·∫ßn chay
                        </Checkbox>
                      </Col>
                      <Col>
                        <Checkbox value="2" style={{ lineHeight: '32px' }}>
                          ƒÇn chay
                        </Checkbox>
                      </Col>
                      <Col>
                        <Checkbox value="3" style={{ lineHeight: '32px' }}>
                          ƒÇn chay pescatarian
                        </Checkbox>
                      </Col>
                      <Col>
                        <Checkbox value="4" style={{ lineHeight: '32px' }}>
                          Ch·∫ø ƒë·ªô ƒÉn ti√™u chu·∫©n c·ªßa ng∆∞·ªùi h·ªìi gi√°o
                        </Checkbox>
                      </Col>
                      <Col>
                        <Checkbox value="5" style={{ lineHeight: '32px' }}>
                          kh√¥ng thu·ªôc m·ªôt trong c√°c ƒë·ªëi t∆∞·ª£ng tr√™n
                        </Checkbox>
                      </Col>
                    </Checkbox.Group>
                  </Form.Item>
                  <Form.Item
                    name="supportEatingDetail.eatingIgnore"
                    label="√îng/ B√† d·ªã ·ª©ng v·ªõi lo·∫°i th·ª±c ph·∫©m n√†o d∆∞·ªõi ƒë√¢y kh√¥ng ?"
                    hasFeedback
                    rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn lo·∫°i th·ª©c ƒÉn c·∫ßn ch√∫ √Ω!' }]}
                  >
                    <Checkbox.Group>
                      <Row>
                        <Col span={12}>
                          <Checkbox value="1" style={{ lineHeight: '32px' }}>
                            L·∫°c
                          </Checkbox>
                        </Col>
                        <Col span={12}>
                          <Checkbox value="2" style={{ lineHeight: '32px' }}>
                            ƒê·∫≠u l√†nh
                          </Checkbox>
                        </Col>
                        <Col span={12}>
                          <Checkbox value="3" style={{ lineHeight: '32px' }}>
                            H·∫°t c√¢y
                          </Checkbox>
                        </Col>
                        <Col span={12}>
                          <Checkbox value="4" style={{ lineHeight: '32px' }}>
                            C·∫ßn t√¢y
                          </Checkbox>
                        </Col>
                        <Col span={12}>
                          <Checkbox value="5" style={{ lineHeight: '32px' }}>
                            V·ª´ng
                          </Checkbox>
                        </Col>
                        <Col span={12}>
                          <Checkbox value="6" style={{ lineHeight: '32px' }}>
                            M√π t·∫°t
                          </Checkbox>
                        </Col>
                        <Col span={12}>
                          <Checkbox value="7" style={{ lineHeight: '32px' }}>
                            B√°n ph·∫©m t·ª´ s·ªØa
                          </Checkbox>
                        </Col>
                        <Col span={12}>
                          <Checkbox value="8" style={{ lineHeight: '32px' }}>
                            C√°
                          </Checkbox>
                        </Col>
                        <Col span={12}>
                          <Checkbox value="9" style={{ lineHeight: '32px' }}>
                            T√¥m/ Cua .. (c√≥ v·ªè)
                          </Checkbox>
                        </Col>
                        <Col span={12}>
                          <Checkbox value="10" style={{ lineHeight: '32px' }}>
                            Tr·ª©ng
                          </Checkbox>
                        </Col>
                        <Col span={12}>
                          <Checkbox value="11" style={{ lineHeight: '32px' }}>
                            B·ªôt m·ª≥
                          </Checkbox>
                        </Col>
                        <Col span={12}>
                          <Checkbox value="12" style={{ lineHeight: '32px' }}>
                            Kh√°c
                          </Checkbox>
                        </Col>
                      </Row>
                    </Checkbox.Group>
                  </Form.Item>
                  <Form.Item name="supportEatingDetail.other">
                    <Input.TextArea showCount maxLength={100} placeholder="D·ªì ƒÉn d·ªã ·ª©ng" />
                  </Form.Item>
                </>
              )}
            </WrapperBox>
            {/* N·ªôp b√°o c√°o tham lu·∫≠n */}
            <WrapperBox>
              <h2>N·ªôp b√°o c√°o tham lu·∫≠n</h2>
              <Form.Item
                name="titleReport"
                label="Ch·ªß ƒë·ªÅ b√°o c√°o"
                hasFeedback
                rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn danh x∆∞ng!' }]}
              >
                <Select placeholder="Ch·ªçn" size="small">
                  {/* TODO: update option */}
                  <Option value="china">China</Option>
                  <Option value="usa">U.S.A</Option>
                </Select>
              </Form.Item>
              <Form.Item name="file_abstract" hasFeedback rules={[{ required: false }]}>
                <UploadReport>
                  <BaseUpload>
                    <BaseButton icon={<UploadOutlined />}>T·∫£i l√™n b√°o c√°o tham lu·∫≠n</BaseButton>
                  </BaseUpload>
                </UploadReport>
              </Form.Item>
            </WrapperBox>
          </FlexCol>
        </Col>
      </Row>
      <Divider></Divider>
      <Row>
        <Col span={24}>
          <Radio.Group style={{ width: '100%', height: '100%' }}>
            <Form.Item name="registration_form_id">
              <TypeRegister>
                <TypeRegisterItem
                  style={{
                    backgroundColor: typeRegister === 1 ? '#d0e4f7' : 'transparent',
                  }}
                >
                  <PriceItem>
                    <h5>
                      <strong>ƒêƒÇNG K√ù S·ªöM</strong>
                    </h5>
                    <h5>Tr∆∞·ªõc 30/06/2024</h5>
                    <h5>
                      <strong>420 Euro</strong>
                    </h5>
                  </PriceItem>
                  <ListAdv>
                    <li>
                      <CheckOutlined />
                      Tham d·ª± t·∫•t c·∫£ c√°c ho·∫°t ƒë·ªông trong khu√¥n kh·ªï h·ªôi ngh·ªã
                    </li>
                    <li>
                      <CheckOutlined />
                      Chi ph√≠ t·∫•t c·∫£ c√°c b·ªØa ƒÉn/ ti·ªác chi√™u ƒë√£i trong khu√¥n kh·ªï h·ªôi ngh·ªã
                    </li>
                    <li>
                      <CheckOutlined />
                      Kh·∫£o s√°t th∆∞·ª£c ƒë·ªãa theo ch∆∞∆°ng tr√¨nh c·ªßa BTC
                    </li>
                  </ListAdv>
                  <Radio value="420" checked onChange={(e) => changeTypeRegister(1)} />
                </TypeRegisterItem>
                <TypeRegisterItem
                  style={{
                    backgroundColor: typeRegister === 2 ? '#d0e4f7' : 'transparent',
                  }}
                >
                  <PriceItem>
                    <h5>
                      <strong>ƒêƒÇNG K√ù TH∆Ø·ªúNG</strong>
                    </h5>
                    <h5>Tr∆∞·ªõc 30/06/2024</h5>
                    <h5>
                      <strong>450 Euro</strong>
                    </h5>
                  </PriceItem>
                  <ListAdv>
                    <li>
                      <CheckOutlined />
                      Tham d·ª± t·∫•t c·∫£ c√°c ho·∫°t ƒë·ªông trong khu√¥n kh·ªï h·ªôi ngh·ªã
                    </li>
                    <li>
                      <CheckOutlined />
                      Chi ph√≠ t·∫•t c·∫£ c√°c b·ªØa ƒÉn/ ti·ªác chi√™u ƒë√£i trong khu√¥n kh·ªï h·ªôi ngh·ªã
                    </li>
                    <li>
                      <CheckOutlined />
                      Kh·∫£o s√°t th∆∞·ª£c ƒë·ªãa theo ch∆∞∆°ng tr√¨nh c·ªßa BTC
                    </li>
                  </ListAdv>
                  <Radio value="450" onChange={(e) => changeTypeRegister(2)} />
                </TypeRegisterItem>
                <TypeRegisterItem
                  style={{
                    backgroundColor: typeRegister === 3 ? '#d0e4f7' : 'transparent',
                  }}
                >
                  <PriceItem>
                    <h5>
                      <strong>ƒêƒÇNG K√ù MU·ªòN</strong>
                    </h5>
                    <h5>Tr∆∞·ªõc 30/06/2024</h5>
                    <h5>
                      <strong>480 Euro</strong>
                    </h5>
                  </PriceItem>
                  <ListAdv>
                    <li>
                      <CheckOutlined />
                      Tham d·ª± t·∫•t c·∫£ c√°c ho·∫°t ƒë·ªông trong khu√¥n kh·ªï h·ªôi ngh·ªã
                    </li>
                    <li>
                      <CheckOutlined />
                      Chi ph√≠ t·∫•t c·∫£ c√°c b·ªØa ƒÉn/ ti·ªác chi√™u ƒë√£i trong khu√¥n kh·ªï h·ªôi ngh·ªã
                    </li>
                    <li>
                      <CheckOutlined />
                      Kh·∫£o s√°t th∆∞·ª£c ƒë·ªãa theo ch∆∞∆°ng tr√¨nh c·ªßa BTC
                    </li>
                  </ListAdv>
                  <Radio value="480" onChange={(e) => changeTypeRegister(3)} />
                </TypeRegisterItem>
              </TypeRegister>
            </Form.Item>
          </Radio.Group>
        </Col>
      </Row>
      <SubmitAction>
        <BaseButton
          type="primary"
          htmlType="submit"
          style={{
            backgroundColor: '#005CB0',
            width: 256,
          }}
          onSubmit={(e) => submitCreated(e, form)}
        >
          ƒêƒÉng k√Ω
        </BaseButton>
      </SubmitAction>
    </Form>
  );
};

export default memo(CreateDelegate);
